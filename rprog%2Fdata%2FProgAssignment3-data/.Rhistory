y<-matrix(1:16,2,4)
y
columnmean(y)
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,i],na.rm = removeNA)
}##for
mean
}
columnmean(y)
columnmean(y)
y
columnmean(y)
add2 <-function(x,y){
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,i],na.rm = removeNA)
}##for
means
}
columnmean(y)
exit
i
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,i],na.rm = removeNA)
}##for
means
}
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,i],na.rm = removeNA)
}##for
means
}
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,i],na.rm = removeNA)
}##for
means
}
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,i],na.rm = removeNA)
}##for
means
}
columnmean(y)
columnmean <- function(y,removeNA=TRUE){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i]<- mean(y[,i],na.rm = removeNA)
}##for
means
}
columnmean(y)
args(cat)
args(paste)
paste("a","b",se="c")
paste("a","b",sep="c")
ls(environment(paste))
x<-c(1:10)
y<-c(20:30)
plot(x,y)
y<-c(21:30)
plot(x,y)
ls(plot)
ls(ennvironment(plot))
ls(environment(paste))
ls(ennvironment(plot))
ls(environment(plot))
date
dates
as.Date("21 Nov 2016")
as.Date("2016-11-21")
unclass(x)
unclass(as.Date("2016-11-21"))
library(swirl)
swirl()
5+7
bye()
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3/9
5>8||6!=8&4>3/9
5 > 8 || 6 != 8 && 4>3.9
isTRUE(6>4)
isTRUE(3)
identical("twinc,"twins)
identical("twins","twins)
)
exit
""
identical("twins","twins")
identical("twins","twins")
xor(5==6,!FALSE)
ints <-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
help(get)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<-y
i <<-NULL
}#set function
get <-function() x
setinverse <- function(solve) i<<-solve
getinverse <- function() x
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <-x$getinverse
if(!is.null(i)){
message("getttin' cache data")
return(i)
}#endif
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
}
x<-matrix(c(2,3,2,2),nrow=2,ncol=2)
x
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<-y
i <<-NULL
}#set function
get <-function() x
setinverse <- function(solve) i<<-solve
getinverse <- function() x
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <-x$getinverse()
if(!is.null(i)){
message("getttin' cache data")
return(i)
}#endif
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
}
x
cacheSolve(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x<-c(2,3,22)
x
cachemean(x)
x$getmean()
x<-makeVector(c(2,2,3,2))
x
cachemean(x)
x<-makeCacheMatrix(matrix(c(2,3,2,2),nrow=2,ncol=2))
cacheSolve(x)
cacheSolve(x)
x
x$getinverse()
x$setinverse()
x$getinverse()
x<-makeVector(c(2,3,4,5))
x$getmean()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<-y
i <<-NULL
}#set function
get <-function() x
setinverse <- function(solve) i<<-solve
getinverse <- function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <-x$getinverse()
if(!is.null(i)){
message("gettin' cache data")
return(i)
}#endif
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
}
x<-makeCacheMatrix(matrix(c(2,3,2,2),nrow=2,ncol=2))
x
x$getinverse()
cacheSolve(x)
cacheSolve(x)
y<-cacheSolve(x)
x*y
x
x$get()
x$get()*y$get()
x$get()*y
y
x<-makeCacheMatrix(matrix(c(2,2,3,2),nrow=2,ncol=2))
cacheSolve(x)
makeCacheMatrix(cacheSolve(x))
y<-makeCacheMatrix(cacheSolve(x))
x$get()*y$get()
x$get()%*%y$get()
class(x)
x$get()
## Fabio Emilio Lapiccirella
## makeCacheMatrix creates a list that includes:
## an invertible square matrix
## functions to:
## print the matrix,
## calculate its inverse,
## print its inverse;
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<-y
i <<-NULL
}#set function
get <-function() x
setinverse <- function(solve) i<<-solve
getinverse <- function() i
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
## cacheSolve is a function that reuses the inbuilt R function "solve"
## to calculate the inverse of a matrix x;
## however, as opposed to the function "solve", it does not explicitly calculate
## the inverse if it was previously calculated on the same matrix;
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <-x$getinverse()
if(!is.null(i)){
message("gettin' cache data")
return(i)
}#endif
data<-x$get()
i<-solve(data,...)
x$setinverse(i)
i
}
x$set(c(2,2,3,2))
x$get()
x$set(matrix(c(2,2,3,2),nrow=2,ncol=2))
x$get()
y$set(cacheSolve(x))
y$get()
y
y$getinverse()
cacheSolve(y)
y$get()
y$get()%*%x$get()
x$set(matrix(c(4,3,3,2),nrow=2,ncol=2))
x$get()
y$set(cacheSolve(x))
y$set(cacheSolve(x))
y$set(cacheSolve(x))
x$get()
y$get()
y$get()%*%x$get()
library(datasets)
data(iris)
iris
sapply(iris,mean)
iris[,"Sepal.Length"]
head(iris)
a<-subset(iris,Species=setosa)
a
a<-subset(iris,Species='setosa')
a
a<-subset(iris,Species=='setosa')
a
a<-subset(iris,Species=='virginica')
a
sapply(a[,Sepal.Length],mean)
head(a)
sapply(a[,"Sepal.Length"],mean)
mean(a[,"Sepal.Length"])
round(mean(a[,"Sepal.Length"]),1)
round(mean(a[,"Sepal.Length"]),0)
lapply(a,function(y),y[,1])
lapply(a,function(y),y[,1])
lapply(a,mean(y),y[,1])
lapply(a,function(y),function(mean[,1]))
lapply(a,elt(y),elt(mean[,1]))
lapply(a,elt(y),mean(y[,1]))
round(mean(a[,"Sepal.Length"]),0)
apply(iris[,1:4],1,mean)
head(iris)
apply(iris[,1:4],2,mean)
colMeans(iris)
rowMeans(iris[],1:4])
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
data(mtcars)
mtcars
tapply(mtcars$cyl,mtcars$mpg,mean)
with(mtcars,tapply(mpg,cyl,mean))
help("with")
a<-subset(mtcars,cyl==4)
a
mean(a[,1])
a<-subset(mtcars,cyl==6)
mean(a[,1])
a<-subset(mtcars,cyl==8)
mean(a[,1])
b<-with(mtcars,tapply(hp,cyl,mean))
b
class(b)
b$4
b.4
b$get
b$get()
b(1)
b[1]
b[1][1]
b[1]-b[2]
b[1]-b[3]
abs(b[1]-b[3])
round(abs(b[1]-b[3]),0)
debug(ls)
ls
with(mtcars,tapply(mpg,cyl,mean))
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
with(mtcars,tapply(mpg,cyl,mean))
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
outcome<-read.csv("outcome-of-care-mearures.csv",colClasses="character")
setwd("~/Documents/Classes/BigDATASpecialization/rprog%2Fdata%2FProgAssignment3-data")
outcome<-read.csv("outcome-of-care-mearures.csv",colClasses="character")
outcome<-read.csv("outcome-of-care-measures.csv",colClasses="character")
head(outcome)
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
outcome<-read.csv("outcome-of-care-measures.csv",colClasses="character")
names(outcome)
dude<-outcome$State
dude
a="TX"
b="TX"
a==b
b="TT"
a==b
a="heart attack"
a=="heart attack"
a=="heart attac"
a=="heart att"
a!="heart att"
a!="heart attack"
dude
a="TX"
a %in% dude
a="TT"
a %in% dude
best(a,"heart attack")
setwd("~/Documents/Classes/BigDATASpecialization/rprog%2Fdata%2FProgAssignment3-data")
best<-function(state,outcome){
##read outcome data
crmsrs<-read.csv("outcome-of-care-measures.csv",colClasses="character")
states<-crmsrs$State
##check that state and outcome are valid
if((outcome!="heart attack")&&(outcome!="heart failure")&&(outcome!="pneumonia")){
stop("invalid outcome")
}#if
if(~state%in%states){
stop("invalid state")
}#if
##return hospital name in that state with lowest 30-day death rate
}#best
best(a,"heart attack")
best<-function(state,outcome){
##read outcome data
crmsrs<-read.csv("outcome-of-care-measures.csv",colClasses="character")
states<-crmsrs$State
##check that state and outcome are valid
if((outcome!="heart attack")&&(outcome!="heart failure")&&(outcome!="pneumonia")){
stop("invalid outcome")
}#if
if(~(state%in%states)){
stop("invalid state")
}#if
##return hospital name in that state with lowest 30-day death rate
}#best
best(a,"heart attack")
est<-function(state,outcome){
##read outcome data
crmsrs<-read.csv("outcome-of-care-measures.csv",colClasses="character")
states<-crmsrs$State
vldst<-state%in%states
##check that state and outcome are valid
if((outcome!="heart attack")&&(outcome!="heart failure")&&(outcome!="pneumonia")){
stop("invalid outcome")
}#if
if(vldst==F){
stop("invalid state")
}#if
##return hospital name in that state with lowest 30-day death rate
}#best
best(a,"heart attack")
best<-function(state,outcome){
##read outcome data
crmsrs<-read.csv("outcome-of-care-measures.csv",colClasses="character")
states<-crmsrs$State
vldst<-state%in%states
##check that state and outcome are valid
if((outcome!="heart attack")&&(outcome!="heart failure")&&(outcome!="pneumonia")){
stop("invalid outcome")
}#if
if(vldst==F){
stop("invalid state")
}#if
##return hospital name in that state with lowest 30-day death rate
}#best
best(a,"heart attack")
a="TX"
best(a,"heart attack")
best(a,"heart attac")
